
@page "/interestPChart"

@using HQQLibrary.Manager
@using HQQLibrary.Model
@using HQQLibrary.Model.Models.MaticonDB;
@using HQQWebReport.Data
@using HQQLibrary.Model.Models.Marketing;

<h3>Interest Top 5 Product Chart</h3>

<Button Clicked="@(async () => await HandleRedraw())">Redraw</Button>
<LineChart @ref="lineChart" TItem="double" />

@code{
    LineChart<double> lineChart;
    List<string> Labels = new List<string>();
    List<CPChartData> lstChartData = new List<CPChartData>();
    List<ChartColor> lstChartColor = new List<ChartColor>();
    List<LineChartDataset<double>> lstLineChartDS = new List<LineChartDataset<double>>();

    int productStep = 10;
    int chartStep = 10;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.InitChartColor();
            this.InitChartData();
            this.GenerateLabel(1, chartStep, 1);
            await HandleRedraw();
        }
    }

    private void InitChartColor()
    {

        //lstChartColor.Add(ChartColor.FromRgba(240, 101, 62, 1f));
        //lstChartColor.Add(ChartColor.FromRgba(127, 199, 145, 1f));
        //lstChartColor.Add(ChartColor.FromRgba(255, 142, 85, 1f));
        //lstChartColor.Add(ChartColor.FromRgba(121, 173, 94, 1f));
        //lstChartColor.Add(ChartColor.FromRgba(38, 59, 112, 1f));


        Random r = new Random();
        for (int i = 0; i < productStep; i++)
        {
            lstChartColor.Add(ChartColor.FromRgba((byte)r.Next(100, 256), (byte)r.Next(100, 256), (byte)r.Next(100, 256), 1f));
        }
    }

    private void InitChartData()
    {
        ShopeeDataExtraction sdeMgr = new ShopeeDataExtraction();
        lstChartData = sdeMgr.GetTopProductChartData(productStep, chartStep);
        int iRow = 0;
        foreach (var item in lstChartData)
        {
            lstLineChartDS.Add(
                new LineChartDataset<double>
                {
                    Label = item.CPProduct.ProductName,
                    Data = item.CPProductStatistic.OrderBy(pItem => pItem.CreatedOn).Select(pItem => (double)pItem.SaleMovement).ToList(),
                    BackgroundColor = new List<string> { lstChartColor[iRow] },
                    BorderColor = new List<string> { lstChartColor[iRow] },
                    Fill = false,
                    PointRadius = 1,
                    BorderDash = new List<int> { }

                });
            iRow++;
        }
    }

    async Task HandleRedraw()
    {
        await lineChart.Clear();
        await lineChart.AddLabel(Labels.ToArray());
        await lineChart.AddDataSet(lstLineChartDS.ToArray());
        await lineChart.Update();
    }

    private void GenerateLabel(int start, int max, int step)
    {
        Labels = new List<string>();
        //{ "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };

        var difference = max - start;
        var stepGap = difference / step;

        for (int i = start; i <= stepGap; i += step)
        {
            Labels.Add(i.ToString());
        }
    }

    LineChartDataset<double> GetLineChartDataset()
    {
        return new LineChartDataset<double>
        {
            Label = "# of randoms",
            Data = RandomizeData(),
            BackgroundColor = new List<string> { ChartColor.FromRgba(65, 175, 25, 1f) },
            BorderColor = new List<string> { ChartColor.FromRgba(65, 175, 25, 1f) },
            Fill = false,
            PointRadius = 1,
            BorderDash = new List<int> { }
        };
    }


    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f) };
    List<string> borderColors = new List<string> {
        ChartColor.FromRgba(255, 99, 132, 1f),
        ChartColor.FromRgba(54, 162, 235, 1f),
        ChartColor.FromRgba(255, 206, 86, 1f),
        ChartColor.FromRgba(75, 192, 192, 1f),
        ChartColor.FromRgba(153, 102, 255, 1f),
        ChartColor.FromRgba(255, 159, 64, 1f) };

    List<double> RandomizeData()
    {
        List<double> lstPoint = new List<double>();
        var r = new Random(DateTime.Now.Millisecond);
        for (int i = 0; i < chartStep; i++)
        {
            lstPoint.Add(r.NextDouble() * 100);
        }

        return lstPoint;
    }

}
